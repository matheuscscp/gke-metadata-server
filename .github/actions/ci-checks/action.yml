# MIT License
#
# Copyright (c) 2023 Matheus Pimenta
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

inputs:
  google-service-account-name:
    required: true
  github-token:
    required: true
  cache-key:
    required: true

outputs:
  release-container:
    value: ${{ steps.release-check.outputs.release-container }}
  release-helm:
    value: ${{ steps.release-check.outputs.release-helm }}

runs:
  using: composite

  steps:
  - uses: actions/setup-go@v4
    with:
      go-version: 1.22.0

  - run: make tidy
    shell: bash
  - name: Fail if make tidy produced changes
    shell: bash
    run: |
      if [ -n "$(git diff --name-only)" ] || [ -n "$(git status --porcelain | grep '??')" ]; then
        git status
        echo ""
        echo "The command 'make tidy' produced differences."
        echo "Please remember to run it locally before committing your changes."
        echo ""
        exit 1
      fi

  - uses: docker/login-action@v3
    with:
      registry: ghcr.io
      username: ${{ github.actor }}
      password: ${{ inputs.github-token }}
  - run: echo $password | helm registry login -u $username --password-stdin $registry
    shell: bash
    env:
      registry: ghcr.io
      username: ${{ github.actor }}
      password: ${{ inputs.github-token }}
  - uses: google-github-actions/auth@v2
    with:
      project_id: gke-metadata-server
      workload_identity_provider: projects/637293746831/locations/global/workloadIdentityPools/github-actions/providers/github-actions
      service_account: ${{ inputs.google-service-account-name }}@gke-metadata-server.iam.gserviceaccount.com

  - run: |
      image=ghcr.io/matheuscscp/gke-metadata-server/ci-cache/go-build
      echo "CACHE_IMAGE=${image}:${CACHE_KEY}" >> $GITHUB_ENV
      echo "DEFAULT_CACHE_IMAGE=${image}:release" >> $GITHUB_ENV
    shell: bash
    env:
      CACHE_KEY: ${{ inputs.cache-key }}

  - run: docker pull $CACHE_IMAGE || docker pull $DEFAULT_CACHE_IMAGE || true
    shell: bash

  - run: make ci-cluster push ci-test
    shell: bash

  - run: docker build . -t $CACHE_IMAGE --target builder && docker push $CACHE_IMAGE
    shell: bash

  - name: Check new releases
    id: release-check
    shell: bash
    run: |
      chart_path=./helm/gke-metadata-server/Chart.yaml

      yq e '.appVersion' $chart_path > container-version.txt
      container_image=ghcr.io/matheuscscp/gke-metadata-server:$(cat container-version.txt)

      helm_image=oci://ghcr.io/matheuscscp/gke-metadata-server-helm
      helm_version=$(yq e '.version' $chart_path)

      container_exists=$(docker pull $container_image > /dev/null && echo yes || echo no)
      helm_exists=$(helm pull $helm_image --version $helm_version > /dev/null && echo yes || echo no)
      if [ "$helm_exists" == "yes" ] && [ "$container_exists" == "no" ]; then
        echo "Must bump .version inside $chart_path when bumping .appVersion."
        exit 1
      elif [ "$helm_exists" == "no" ] && [ "$container_exists" == "yes" ]; then
        echo "Need to release new version of the Helm Chart image."
        echo "release-container=no" >> $GITHUB_OUTPUT
        echo "release-helm=yes" >> $GITHUB_OUTPUT
      elif [ "$helm_exists" == "no" ] && [ "$container_exists" == "no" ]; then
        echo "Need to release new versions for both images."
        echo "release-container=yes" >> $GITHUB_OUTPUT
        echo "release-helm=yes" >> $GITHUB_OUTPUT
      else
        echo "Both versions already exist. No release needed."
        echo "release-container=no" >> $GITHUB_OUTPUT
        echo "release-helm=no" >> $GITHUB_OUTPUT
      fi
